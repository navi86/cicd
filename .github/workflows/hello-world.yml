name: 'Hello World'

on: [push]
  # pull_request:
  #   branches:
  #     - main

  # push:
  #   branches:
  #     - main



jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: self-hosted
    # runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Github Variables
        id: vars
        env: 
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          echo ::set-output name=short_sha::$(echo ${GITHUB_SHA} | cut -c1-7)
          echo ::set-output name=github_repository::$(echo ${GITHUB_REPOSITORY,,} )
          echo ::set-output name=branch_name::$(echo ${GITHUB_REF##*/} )
          echo ::set-output name=github_repository_name::$(echo ${GITHUB_REPOSITORY,,} | awk -F / '{print $2}' )

      # - name: print env variables
      #   run: |
      #     ls -la
      #     env
# this steps is required to have vault instance on github agent
      # - name: Import Secrets Original
      #   id: secrets-original
      #   uses: hashicorp/vault-action@v2.4.2
      #   with:
      #     url: https://vault.localhost:8080
      #     method: approle
      #     # roleId: ${{ secrets.VAULT_ROLE_ID }}
      #     # secretId: ${{ secrets.VAULT_SECRET_ID }}
      #     tlsSkipVerify: true
      #     secrets: |
      #       kv/data/github-actions/docker username | docker_username ;
      #       kv/data/github-actions/docker password | docker_username ;

      # - name: Import Secrets Custom
      #   if: always()
      #   id: secrets-custom
      #   uses: ./
      #   with:
      #     url: https://vault.localhost:8080
      #     method: approle
      #     # roleId: ${{ secrets.VAULT_ROLE_ID }}
      #     # secretId: ${{ secrets.VAULT_SECRET_ID }}
      #     tlsSkipVerify: true
      #     secrets: |
      #       kv/data/github-actions/docker username | docker_username ;
      #       kv/data/github-actions/docker password | docker_username ;

      - name: Set up Docker Context for Buildx
        id: buildx-context
        run: |
          docker context inspect builders || docker context create builders
    
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          endpoint: builders

      # - name: Login to docker registry
      #   uses: docker/login-action@v2
      #   with:
      #     registry: docker.io
      #     username: "${{ secrets..docker_username }}"
      #     password: "${{ secrets.docker_password }}"

      - name: Build
        uses: docker/build-push-action@v3
        with:
          # cache-from: /${{ steps.vars.outputs.github_repository }}:master
          push: false
          load: true
          tags: |
            navi86/hello-world:${{ steps.vars.outputs.branch_name }}
            navi86/hello-world:${{ steps.vars.outputs.branch_name }}-${{ steps.vars.outputs.short_sha }}
          cache-from: |
            type=local,src=/tmp/docker-cache
          cache-to: |
            type=local,dest=/tmp/docker-cache,mode=max
          # output: |
          #   type=docker,dest=image.tar .
# only works on linux      
      # - name: scan_docker_image_aquasec
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: navi86/hello-world:${{ steps.vars.outputs.branch_name }}
      #     severity: "CRITICAL,HIGH"
      #     skip-dirs: /usr/local/bundle/cache
      #     security-checks: vuln
      #     ignore-unfixed: true
      #     exit-code: "1"
